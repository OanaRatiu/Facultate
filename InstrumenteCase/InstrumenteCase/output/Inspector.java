
/*
 * @(#)Inspector.java
 *
 * Generated by <a href="http://lci.cs.ubbcluj.ro/ocle/>OCLE 2.0</a>
 * using <a href="http://jakarta.apache.org/velocity/">
 * Velocity Template Engine 1.3rc1</a>
 */
import java.util.LinkedHashSet;
import java.util.Set;
import ro.ubbcluj.lci.codegen.framework.ocl.BasicConstraintChecker;
import ro.ubbcluj.lci.codegen.framework.ocl.CollectionUtilities;

/**
 *
 * @author unascribed
 */
public class Inspector
{

    
    public void addDecedat(Decedat decedat)
    {

        
        class ConstraintChecker
        {

            
            public void checkPreconditions(Decedat decedat)
            {

                check_precondition(decedat);

            }
            
            public void checkPostconditions(Decedat decedat)
            {

                check_postcondition(decedat);

            }
            
            public void check_precondition(Decedat d)
            {

                int nIdDecedat = d.idDecedat;
                boolean bGreater = nIdDecedat > 0;
                String strNume = d.nume;
                boolean bNotEquals = !strNume.equals("");
                boolean bAnd0 = bGreater && bNotEquals;
                String strPrenume = d.prenume;
                boolean bNotEquals0 = !strPrenume.equals("");
                boolean bAnd = bAnd0 && bNotEquals0;
                if (!bAnd)
                {
                    System.err.println("precondition 'precondition' failed for object "+Inspector.this);
                }

            }
            
            public void check_postcondition(Decedat d)
            {

                Set setDecedati = Inspector.this.getDecedati();
                boolean bIncludes = CollectionUtilities.includes(setDecedati, d);
                if (!bIncludes)
                {
                    System.err.println("postcondition 'postcondition' failed for object "+Inspector.this);
                }

            }

        }
        ConstraintChecker checker = new ConstraintChecker();
        checker.checkPreconditions(decedat);
        checker.result = internal_addDecedat(decedat);

        checker.checkPostconditions(decedat);
        return checker.result;

    }
    
    public void addDetinator(Detinator detinator)
    {

        
        class ConstraintChecker
        {

            
            public void checkPreconditions(Detinator detinator)
            {

                check_precondition(detinator);

            }
            
            public void checkPostconditions(Detinator detinator)
            {

                check_postcondition(detinator);

            }
            
            public void check_precondition(Detinator d)
            {

                int nIdDetinator = d.idDetinator;
                boolean bGreater = nIdDetinator > 0;
                String strNume = d.nume;
                boolean bNotEquals = !strNume.equals("");
                boolean bAnd0 = bGreater && bNotEquals;
                String strChitanta = d.chitanta;
                boolean bNotEquals0 = !strChitanta.equals("");
                boolean bAnd = bAnd0 && bNotEquals0;
                if (!bAnd)
                {
                    System.err.println("precondition 'precondition' failed for object "+Inspector.this);
                }

            }
            
            public void check_postcondition(Detinator d)
            {

                Set setDetinatori = Inspector.this.getDetinatori();
                boolean bIncludes = CollectionUtilities.includes(setDetinatori, d);
                if (!bIncludes)
                {
                    System.err.println("postcondition 'postcondition' failed for object "+Inspector.this);
                }

            }

        }
        ConstraintChecker checker = new ConstraintChecker();
        checker.checkPreconditions(detinator);
        checker.result = internal_addDetinator(detinator);

        checker.checkPostconditions(detinator);
        return checker.result;

    }
    
    public void addMormant(Mormant mormant)
    {

        
        class ConstraintChecker
        {

            
            public void checkPreconditions(Mormant mormant)
            {

                check_precondition(mormant);

            }
            
            public void checkPostconditions(Mormant mormant)
            {

                check_postcondition(mormant);

            }
            
            public void check_precondition(Mormant m)
            {

                int nIdMormant = m.idMormant;
                boolean bGreater = nIdMormant > 0;
                if (!bGreater)
                {
                    System.err.println("precondition 'precondition' failed for object "+Inspector.this);
                }

            }
            
            public void check_postcondition(Mormant m)
            {

                Set setMorminte = Inspector.this.getMorminte();
                boolean bIncludes = CollectionUtilities.includes(setMorminte, m);
                if (!bIncludes)
                {
                    System.err.println("postcondition 'postcondition' failed for object "+Inspector.this);
                }

            }

        }
        ConstraintChecker checker = new ConstraintChecker();
        checker.checkPreconditions(mormant);
        checker.result = internal_addMormant(mormant);

        checker.checkPostconditions(mormant);
        return checker.result;

    }
    
    public final Set getMorminte()
    {

        if (morminte == null)
        {
            return java.util.Collections.EMPTY_SET;
        }
        return java.util.Collections.unmodifiableSet(morminte);
    }
    
    public final void addMorminte(Mormant arg)
    {

        if (arg != null)
        {
            if (morminte == null)
            {
                morminte = new LinkedHashSet();
            }
            morminte.add(arg);
        }

    }
    
    public final void removeMorminte(Mormant arg)
    {

        if (morminte != null && arg != null)
        {
            morminte.remove(arg);
        }

    }
    
    public final Set getDecedati()
    {

        if (decedati == null)
        {
            return java.util.Collections.EMPTY_SET;
        }
        return java.util.Collections.unmodifiableSet(decedati);
    }
    
    public final void addDecedati(Decedat arg)
    {

        if (arg != null)
        {
            if (decedati == null)
            {
                decedati = new LinkedHashSet();
            }
            decedati.add(arg);
        }

    }
    
    public final void removeDecedati(Decedat arg)
    {

        if (decedati != null && arg != null)
        {
            decedati.remove(arg);
        }

    }
    
    public final Set getDetinatori()
    {

        if (detinatori == null)
        {
            return java.util.Collections.EMPTY_SET;
        }
        return java.util.Collections.unmodifiableSet(detinatori);
    }
    
    public final void addDetinatori(Detinator arg)
    {

        if (arg != null)
        {
            if (detinatori == null)
            {
                detinatori = new LinkedHashSet();
            }
            detinatori.add(arg);
        }

    }
    
    public final void removeDetinatori(Detinator arg)
    {

        if (detinatori != null && arg != null)
        {
            detinatori.remove(arg);
        }

    }
    
    public String getNume()
    {

        String strNume = Inspector.this.nume;
        return strNume;

    }
    
    private void internal_addDecedat(Decedat decedat)
    {

    }
    
    private void internal_addDetinator(Detinator detinator)
    {

    }
    
    private void internal_addMormant(Mormant mormant)
    {

    }
    
    public Inspector()
    {

    }
    
    public class ConstraintChecker extends BasicConstraintChecker
    {

        
        public void checkConstraints()
        {

            super.checkConstraints();
            check_Inspector_invariant();

        }
        
        public void check_Inspector_invariant()
        {

            String strNume = Inspector.this.nume;
            boolean bNotEquals = !strNume.equals("");
            if (!bNotEquals)
            {
                System.err.println("invariant 'invariant' failed for object "+Inspector.this);
            }

        }

    }
    
    public String nume;
    
    public Set morminte;
    
    public Set decedati;
    
    public Set detinatori;

}
