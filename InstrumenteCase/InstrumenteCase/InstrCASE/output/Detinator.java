
/*
 * @(#)Detinator.java
 *
 * Generated by <a href="http://lci.cs.ubbcluj.ro/ocle/>OCLE 2.0</a>
 * using <a href="http://jakarta.apache.org/velocity/">
 * Velocity Template Engine 1.3rc1</a>
 */
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import ro.ubbcluj.lci.codegen.framework.dt.Integer;
import ro.ubbcluj.lci.codegen.framework.ocl.BasicConstraintChecker;
import ro.ubbcluj.lci.codegen.framework.ocl.CollectionUtilities;
import ro.ubbcluj.lci.codegen.framework.ocl.Ocl;
import ro.ubbcluj.lci.codegen.framework.ocl.OclType;

/**
 *
 * @author unascribed
 */
public class Detinator
{

    
    public void addMormant(Mormant mormant)
    {

        
        class ConstraintChecker
        {

            
            public void checkPreconditions(Mormant mormant)
            {

                check_precondition(mormant);

            }
            
            public void checkPostconditions(Mormant mormant)
            {

                check_postcondition(mormant);

            }
            
            public void check_precondition(Mormant m)
            {

                int nIdMormant = m.idMormant;
                boolean bGreater = nIdMormant > 0;
                if (!bGreater)
                {
                    System.err.println("precondition 'precondition' failed for object "+Detinator.this);
                }

            }
            
            public void check_postcondition(Mormant m)
            {

                Set setMorminte = Detinator.this.getMorminte();
                boolean bIncludes = CollectionUtilities.includes(setMorminte, m);
                if (!bIncludes)
                {
                    System.err.println("postcondition 'postcondition' failed for object "+Detinator.this);
                }

            }

        }
        ConstraintChecker checker = new ConstraintChecker();
        checker.checkPreconditions(mormant);
        checker.result = internal_addMormant(mormant);

        checker.checkPostconditions(mormant);
        return checker.result;

    }
    
    public final Set getMorminte()
    {

        if (morminte == null)
        {
            return java.util.Collections.EMPTY_SET;
        }
        return java.util.Collections.unmodifiableSet(morminte);
    }
    
    public final void addMorminte(Mormant arg)
    {

        if (arg != null)
        {
            if (morminte == null)
            {
                morminte = new LinkedHashSet();
            }
            if (morminte.add(arg))
            {
                arg.setDetinator(this);
            }
        }

    }
    
    public final void removeMorminte(Mormant arg)
    {

        if (morminte != null && arg != null)
        {
            if (morminte.remove(arg))
            {
                arg.setDetinator(null);
            }
        }

    }
    
    public String getNume()
    {

        String strNume = Detinator.this.nume;
        return strNume;

    }
    
    public String getChitanta()
    {

        String strChitanta = Detinator.this.chitanta;
        return strChitanta;

    }
    
    public Set getMormant(int id)
    {

        Set setMorminte = Detinator.this.getMorminte();
        //evaluate 'select(m:Mormant|m.idMormant=id)':
        Set setSelect = CollectionUtilities.newSet();
        final Iterator iter = setMorminte.iterator();
        while (iter.hasNext())
        {
            final Mormant m = (Mormant)iter.next();
            int nIdMormant = m.idMormant;
            boolean bEquals = nIdMormant == id;
            
            if (bEquals) CollectionUtilities.add(setSelect, m);
        }
        return setSelect;

    }
    
    public Set getMormant2(int id)
    {

        Set setMorminte = Detinator.this.getMorminte();
    //evaluate 'iterate(m:Mormant;a:Set(Mormant)=Set{}|if m.idMormant=id then a->including(m)else a endif)':
        //first initialize the accumulator (a):
        Set set = CollectionUtilities.newSet();
        
        Set a = set;
        final Iterator iter = setMorminte.iterator();
        while (iter.hasNext())
        {
            final Mormant m = (Mormant)iter.next();
            Set setIf;
            int nIdMormant = m.idMormant;
            boolean bEquals = nIdMormant == id;
            
            if (bEquals)
            {
                Set setIncluding = CollectionUtilities.including(a, m);
                
                setIf = setIncluding;
            }
            else
            {
                
                setIf = a;
            }
            
            a = setIf;
        }
        Set setIterate = a;
        return setIterate;

    }
    
    private void internal_addMormant(Mormant mormant)
    {

    }
    
    public Detinator()
    {

    }
    
    public class ConstraintChecker extends BasicConstraintChecker
    {

        
        public void checkConstraints()
        {

            super.checkConstraints();
            check_Detinator_invariant();
            check_Detinator_invariant0();
            check_Detinator_invariant1();

        }
        
        public void check_Detinator_invariant()
        {

            int nIdDetinator = Detinator.this.idDetinator;
            boolean bIsDefined = Ocl.isDefined(Integer.toInteger(nIdDetinator));
            int nIdDetinator0 = Detinator.this.idDetinator;
            boolean bGreater = nIdDetinator0 > 0;
            boolean bAnd = bIsDefined && bGreater;
            if (!bAnd)
            {
                System.err.println("invariant 'invariant' failed for object "+Detinator.this);
            }

        }
        
        public void check_Detinator_invariant0()
        {

        Set setAllInstances = Ocl.getType(new Class[]{Detinator.class}).allInstances();
            //evaluate 'collect(idDetinator)':
            List bagCollect = CollectionUtilities.newBag();
            final Iterator iter = setAllInstances.iterator();
            while (iter.hasNext())
            {
                final Detinator decl = (Detinator)iter.next();
                int nIdDetinator = decl.idDetinator;
                
                bagCollect.add(Integer.toInteger(nIdDetinator));
            }
            bagCollect = CollectionUtilities.flatten(bagCollect);
            
            //evaluate 'isUnique(n|n)':
            Set uniquenessValidator = CollectionUtilities.newSet();
            boolean bIsUnique = true;
            final Iterator iter0 = bagCollect.iterator();
            while (bIsUnique && iter0.hasNext())
            {
                final int n = ((Integer)iter0.next()).asInteger();
                
                bIsUnique = uniquenessValidator.add(Integer.toInteger(n));
            }
            if (!bIsUnique)
            {
                System.err.println("invariant 'invariant0' failed for object "+Detinator.this);
            }

        }
        
        public void check_Detinator_invariant1()
        {

            String strChitanta = Detinator.this.chitanta;
            boolean bNotEquals = !strChitanta.equals("");
            if (!bNotEquals)
            {
                System.err.println("invariant 'invariant1' failed for object "+Detinator.this);
            }

        }

    }
    
    public int idDetinator;
    
    public String nume;
    
    public String chitanta;
    
    public Set morminte;
    {

        OclType.registerInstance(this, Detinator.class);

    }

}
