
/*
 * @(#)Mormant.java
 *
 * Generated by <a href="http://lci.cs.ubbcluj.ro/ocle/>OCLE 2.0</a>
 * using <a href="http://jakarta.apache.org/velocity/">
 * Velocity Template Engine 1.3rc1</a>
 */
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import ro.ubbcluj.lci.codegen.framework.dt.Integer;
import ro.ubbcluj.lci.codegen.framework.ocl.BasicConstraintChecker;
import ro.ubbcluj.lci.codegen.framework.ocl.CollectionUtilities;
import ro.ubbcluj.lci.codegen.framework.ocl.Ocl;
import ro.ubbcluj.lci.codegen.framework.ocl.OclType;

/**
 *
 * @author unascribed
 */
public class Mormant {

    
    public Decedat addDecedat(Decedat decedat) {

        
        class ConstraintChecker {

            
            public Decedat result;

			public void checkPreconditions(Decedat decedat) {

                check_precondition(decedat);

            }
            
            public void checkPostconditions(Decedat decedat) {

                check_postcondition(decedat);

            }
            
            public void check_precondition(Decedat d) {

                int nIdDecedat = d.idDecedat;
                boolean bGreater = nIdDecedat > 0;
                String strNume = d.nume;
                boolean bNotEquals = !strNume.equals("");
                boolean bAnd0 = bGreater && bNotEquals;
                String strPrenume = d.prenume;
                boolean bNotEquals0 = !strPrenume.equals("");
                boolean bAnd = bAnd0 && bNotEquals0;
                if (!bAnd) {
                    System.err.println("precondition 'precondition' failed for object "+Mormant.this);
                }

            }
            
            public void check_postcondition(Decedat d) {

                Set setDecedati = Mormant.this.getDecedati();
                boolean bIncludes = CollectionUtilities.includes(setDecedati, d);
                if (!bIncludes) {
                    System.err.println("postcondition 'postcondition' failed for object "+Mormant.this);
                }

            }

        }
        ConstraintChecker checker = new ConstraintChecker();
        checker.checkPreconditions(decedat);
        checker.result = internal_addDecedat(decedat);

        checker.checkPostconditions(decedat);
        return checker.result;

    }
    
    public final Set getDecedati() {

        if (decedati == null) {
            return java.util.Collections.EMPTY_SET;
        }
        return java.util.Collections.unmodifiableSet(decedati);
    }
    
    public final void addDecedati(Decedat arg) {

        if (arg != null) {
            if (decedati == null) {
                decedati = new LinkedHashSet();
            }
            if (decedati.add(arg)) {
                arg.setMormant(this);
            }
        }

    }
    
    public final void removeDecedati(Decedat arg) {

        if (decedati != null && arg != null) {
            if (decedati.remove(arg)) {
                arg.setMormant(null);
            }
        }

    }
    
    public final Detinator getDetinator() {

        return detinator;
    }
    
    public final void setDetinator(Detinator arg) {

        if (detinator != arg) {
            Detinator temp = detinator;
            detinator = null;//to avoid infinite recursions
            if (temp != null) {
                temp.removeMorminte(this);
            }
            if (arg != null) {
                detinator = arg;
                arg.addMorminte(this);
            }
        }

    }
    
    private Decedat internal_addDecedat(Decedat decedat) {
    	return decedat;
    }
    
    public Mormant() {

    }
    
    public class ConstraintChecker extends BasicConstraintChecker {

        
        public void checkConstraints() {

            super.checkConstraints();
            check_Mormant_invariant();
            check_Mormant_invariant0();

        }
        
        public void check_Mormant_invariant() {

            int nIdMormant = Mormant.this.idMormant;
            boolean bIsDefined = Ocl.isDefined(Integer.toInteger(nIdMormant));
            int nIdMormant0 = Mormant.this.idMormant;
            boolean bGreater = nIdMormant0 > 0;
            boolean bAnd = bIsDefined && bGreater;
            if (!bAnd) {
                System.err.println("invariant 'invariant' failed for object "+Mormant.this);
            }

        }
        
        public void check_Mormant_invariant0() {

        Set setAllInstances = Ocl.getType(new Class[]{Mormant.class}).allInstances();
            //evaluate 'collect(idMormant)':
            List bagCollect = CollectionUtilities.newBag();
            final Iterator iter = setAllInstances.iterator();
            while (iter.hasNext()) {
                final Mormant decl = (Mormant)iter.next();
                int nIdMormant = decl.idMormant;
                
                bagCollect.add(Integer.toInteger(nIdMormant));
            }
            bagCollect = CollectionUtilities.flatten(bagCollect);
            
            //evaluate 'isUnique(n|n)':
            Set uniquenessValidator = CollectionUtilities.newSet();
            boolean bIsUnique = true;
            final Iterator iter0 = bagCollect.iterator();
            while (bIsUnique && iter0.hasNext()) {
                final int n = ((Integer)iter0.next()).asInteger();
                
                bIsUnique = uniquenessValidator.add(Integer.toInteger(n));
            }
            if (!bIsUnique) {
                System.err.println("invariant 'invariant0' failed for object "+Mormant.this);
            }

        }

    }
    
    public int idMormant;
    
    public Set decedati;
    
    public Detinator detinator;
    {

        OclType.registerInstance(this, Mormant.class);

    }

}
