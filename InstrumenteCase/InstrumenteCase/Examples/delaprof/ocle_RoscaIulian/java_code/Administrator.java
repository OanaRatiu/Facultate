/*
 * @(#)Administrator.java
 *
 * Generated by <a href="http://lci.cs.ubbcluj.ro/ocle/>OCLE 2.0</a>
 * using <a href="http://jakarta.apache.org/velocity/">
 * Velocity Template Engine 1.3rc1</a>
 */
import ro.ubbcluj.lci.codegen.framework.ocl.BasicConstraintChecker;

public class Administrator {

	public Administrator(String name, SaleSystem job) {
		super();
		this.setName(name);
		this.saleSystem = job;
	}

	public boolean createNewProduct(String bCode, String name, float price) {

		class ConstraintChecker {
			boolean result = true;

			public void checkPreconditions(String bCode, String name,
					float price) {

				check_precondition(bCode, name, price);

			}

			public void checkPostconditions(String bCode, String name,
					float price) {

			}

			public void check_precondition(String bCode, String name,
					float price) {

				boolean bNotEquals = !bCode.equals("");
				boolean bNotEquals0 = !name.equals("");
				boolean bAnd0 = bNotEquals && bNotEquals0;
				boolean bGreater = price > 0;
				boolean bAnd = bAnd0 && bGreater;
				if (!bAnd) {
					result = false;
					System.err
							.println("precondition 'createNewProduct' failed for object "
									+ Administrator.this);
				}

			}

		}
		ConstraintChecker checker = new ConstraintChecker();

		checker.checkPreconditions(bCode, name, price);
		if (checker.result == true) {
			internal_createNewProduct(bCode, name, price);
			checker.checkPostconditions(bCode, name, price);
		}
		return checker.result;

	}

	public boolean deleteProduct(String barCode) {

		class ConstraintChecker {
			private boolean result = false;

			private void checkPreconditions(String barCode) {

				check_precondition(barCode);

			}

			private void checkPostconditions(String barCode) {

			}

			private void check_precondition(String bCode) {

				boolean bNotEquals = !bCode.equals("");
				if (!bNotEquals) {
					result = false;
					System.err
							.println("precondition 'deleteProduct' failed for object "
									+ Administrator.this);
				}

			}

		}
		ConstraintChecker checker = new ConstraintChecker();
		checker.checkPreconditions(barCode);

		if (checker.result == true) {
			internal_deleteProduct(barCode);

			checker.checkPostconditions(barCode);
		}
		return checker.result;

	}

	public boolean updateProduct(String barCode, String name, float price) {

		class ConstraintChecker {
			private boolean result = true;

			public void checkPreconditions(String barCode, String name,
					float price) {

				check_precondition(barCode, name, price);

			}

			public void checkPostconditions(String barCode, String name,
					float price) {

			}

			public void check_precondition(String bCode, String name,
					float price) {

				boolean bNotEquals = !bCode.equals("");
				boolean bNotEquals0 = !name.equals("");
				boolean bAnd0 = bNotEquals && bNotEquals0;
				boolean bGreater = price > 0;
				boolean bAnd = bAnd0 && bGreater;
				if (!bAnd) {
					result = false;
					System.err
							.println("precondition 'updateProduct' failed for object "
									+ Administrator.this);
				}

			}

		}
		ConstraintChecker checker = new ConstraintChecker();
		checker.checkPreconditions(barCode, name, price);

		if (checker.result == true) {
			internal_updateProduct(barCode, name, price);

			checker.checkPostconditions(barCode, name, price);
		}
		return checker.result;

	}

	public final SaleSystem getJob() {

		return saleSystem;
	}

	public final void setJob(SaleSystem arg) {

		if (saleSystem != arg) {
			SaleSystem temp = saleSystem;
			saleSystem = null;// to avoid infinite recursion
			if (temp != null) {
				temp.setAdministrator(null);
			}
			if (arg != null) {
				saleSystem = arg;
				arg.setAdministrator(this);
			}
		}

	}

	private void internal_createNewProduct(String bCode, String name,
			float price) {
		saleSystem.handleCreateNewProduct(bCode, name, price);

	}

	private void internal_deleteProduct(String barCode) {
		saleSystem.handleDeleteProduct(barCode);
	}

	private void internal_updateProduct(String barCode, String name, float price) {
		saleSystem.handleUpdateProduct(barCode, new Product(barCode, name,
				price));
	}

	public class ConstraintChecker extends BasicConstraintChecker {

		public void checkConstraints() {

			super.checkConstraints();
			check_Administrator_invariant();

		}

		public void check_Administrator_invariant() {

			String strName = Administrator.this.getName();
			boolean bNotEquals = !strName.equals("");
			if (!bNotEquals) {
				System.err
						.println("invariant 'name is not empty' failed for object "
								+ Administrator.this);
			}

		}

	}

	private String name;

	private SaleSystem saleSystem;

	@Override
	public String toString() {
		return "Administrator [name=" + getName() + "]";
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

}
