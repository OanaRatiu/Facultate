
/*
 * @(#)Stock.java
 *
 * Generated by <a href="http://lci.cs.ubbcluj.ro/ocle/>OCLE 2.0</a>
 * using <a href="http://jakarta.apache.org/velocity/">
 * Velocity Template Engine 1.3rc1</a>
 */
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Set;
import ro.ubbcluj.lci.codegen.framework.ocl.CollectionUtilities;

/**
 *
 * @author unascribed
 */
public class Stock {

    
    public void addProduct(Product p) {

        
        class ConstraintChecker {

            
            public void checkPreconditions(Product p) {

            }
            
            public void checkPostconditions(Product p) {

                check_postcondition(p);

            }
            
            public void check_postcondition(Product p) {

                Set setProducts = Stock.this.getProducts();
                boolean bIncludes = CollectionUtilities.includes(setProducts, p);
                if (!bIncludes) {
                    System.err.println("postcondition 'postcondition' failed for object "+Stock.this);
                }

            }

        }
        ConstraintChecker checker = new ConstraintChecker();
        checker.checkPreconditions(p);
        checker.result = internal_addProduct(p);

        checker.checkPostconditions(p);
        return checker.result;

    }
    
    public void deleteProduct(Product p) {

        
        class ConstraintChecker {

            
            public void checkPreconditions(Product p) {

            }
            
            public void checkPostconditions(Product p) {

                check_postcondition(p);

            }
            
            public void check_postcondition(Product p) {

                Set setProducts = Stock.this.getProducts();
                boolean bIncludes = CollectionUtilities.includes(setProducts, p);
                boolean bNot = !bIncludes;
                if (!bNot) {
                    System.err.println("postcondition 'postcondition' failed for object "+Stock.this);
                }

            }

        }
        ConstraintChecker checker = new ConstraintChecker();
        checker.checkPreconditions(p);
        checker.result = internal_deleteProduct(p);

        checker.checkPostconditions(p);
        return checker.result;

    }
    
    public void updateProduct(Product p) {

    }
    
    public final Set getProducts() {

        if (products == null) {
            return java.util.Collections.EMPTY_SET;
        }
        return java.util.Collections.unmodifiableSet(products);
    }
    
    public final void addProducts(Product arg) {

        if (arg != null) {
            if (products == null) {
                products = new LinkedHashSet();
            }
            products.add(arg);
        }

    }
    
    public final void removeProducts(Product arg) {

        if (products != null && arg != null) {
            products.remove(arg);
        }

    }
    
    public int n() {

        return 10;

    }
    
    public Set selectProds() {

        Set setProducts = Stock.this.getProducts();
        //evaluate 'select(p|p.getPrice>n)':
        Set setSelect = CollectionUtilities.newSet();
        final Iterator iter = setProducts.iterator();
        while (iter.hasNext()) {
            final Product p = (Product)iter.next();
            float fgetPrice = p.getPrice();
            int nn = Stock.this.n();
            boolean bGreater = fgetPrice > nn;
            
            if (bGreater) CollectionUtilities.add(setSelect, p);
        }
        return setSelect;

    }
    
    private void internal_addProduct(Product p) {

    }
    
    private void internal_deleteProduct(Product p) {

    }
    
    public Stock() {

    }
    
    private Set products;

}
