
/*
 * @(#)SaleSystem.java
 *
 * Generated by <a href="http://lci.cs.ubbcluj.ro/ocle/>OCLE 2.0</a>
 * using <a href="http://jakarta.apache.org/velocity/">
 * Velocity Template Engine 1.3rc1</a>
 */
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import ro.ubbcluj.lci.codegen.framework.dt.Integer;
import ro.ubbcluj.lci.codegen.framework.ocl.CollectionUtilities;
import ro.ubbcluj.lci.codegen.framework.ocl.Pairs;
import tupleTypes.TupleType1;

/**
 *
 * @author unascribed
 */
public class SaleSystem {

    
    public void handleNewSale(Sale sale) {

    }
    
    public void handleCreateNewProduct(String bCode, String name, float price) {

    }
    
    public void handleUpdateProduct(String bCode, Product producft) {

    }
    
    public void handleDeleteProduct(String bCode) {

    }
    
    public final Administrator getAdministrator() {

        return administrator;
    }
    
    public final void setAdministrator(Administrator arg) {

        if (administrator != arg) {
            Administrator temp = administrator;
            administrator = null;//to avoid infinite recursion
            if (temp != null) {
                temp.setJob(null);
            }
            if (arg != null) {
                administrator = arg;
                arg.setJob(this);
            }
        }

    }
    
    public final Set getSaleAgents() {

        if (saleAgents == null) {
            return java.util.Collections.EMPTY_SET;
        }
        return java.util.Collections.unmodifiableSet(saleAgents);
    }
    
    public final void addSaleAgents(SaleAgent arg) {

        if (arg != null) {
            if (saleAgents == null) {
                saleAgents = new LinkedHashSet();
            }
            if (saleAgents.add(arg)) {
                arg.setJob(this);
            }
        }

    }
    
    public final void removeSaleAgents(SaleAgent arg) {

        if (saleAgents != null && arg != null) {
            if (saleAgents.remove(arg)) {
                arg.setJob(null);
            }
        }

    }
    
    public final Set getLog() {

        if (log == null) {
            return java.util.Collections.EMPTY_SET;
        }
        return java.util.Collections.unmodifiableSet(log);
    }
    
    public final void addLog(Sale arg) {

        if (arg != null) {
            if (log == null) {
                log = new LinkedHashSet();
            }
            log.add(arg);
        }

    }
    
    public final void removeLog(Sale arg) {

        if (log != null && arg != null) {
            log.remove(arg);
        }

    }
    
    public final Stock getStock() {

        return stock;
    }
    
    public final void setStock(Stock arg) {

        stock = arg;
    }
    
    public String mostSalesAgent() {

        Set setSaleAgents = SaleSystem.this.getSaleAgents();
    //evaluate 'collectNested(a|Tuple{id=a.getId,name=a.getName,sales=a.getSales,valSize=a.getSales->size})':
        List bagCollectNested = CollectionUtilities.newBag();
        final Iterator iter = setSaleAgents.iterator();
        while (iter.hasNext()) {
            final SaleAgent a = (SaleAgent)iter.next();
            TupleType1 tuple = new TupleType1();
            int ngetId = a.getId();
            tuple.id = ngetId;
            String strgetName = a.getName();
            tuple.name = strgetName;
            Set setgetSales = a.getSales();
            tuple.sales = setgetSales;
            Set setgetSales0 = a.getSales();
            int nSize = CollectionUtilities.size(setgetSales0);
            tuple.valSize = nSize;
            
            bagCollectNested.add(tuple);
        }
        //evaluate 'sortedBy(a|a.valSize)':
        //use a temporary variable to map the elements in bagCollectNested with the values of the argument expression
        //These pairs are then sorted by the second element
        final Pairs sortedPairs = new Pairs();
        final Iterator iter0 = bagCollectNested.iterator();
        while (iter0.hasNext()) {
            final Object temp = iter0.next();
            final TupleType1 a = (TupleType1)temp;
            int nValSize = a.valSize;
            
            sortedPairs.addPair(temp, Integer.toInteger(nValSize));
        }
        sortedPairs.sort();//sort pairs
        List seqSortedBy = sortedPairs.asSequence();
        TupleType1 tupleLast = (TupleType1)CollectionUtilities.last(seqSortedBy);
        String strName = tupleLast.name;
        return strName;

    }
    
    public SaleSystem() {

    }
    
    private Administrator administrator;
    
    private Set saleAgents;
    
    private Set log;
    
    private Stock stock;

}
