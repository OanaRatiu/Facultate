

/*
 * @(#)SaleAgent.java
 *
 * Generated by <a href="http://lci.cs.ubbcluj.ro/ocle/>OCLE 2.0</a>
 * using <a href="http://jakarta.apache.org/velocity/">
 * Velocity Template Engine 1.3rc1</a>
 */
import java.util.Set;

import ro.ubbcluj.lci.codegen.framework.dt.Integer;
import ro.ubbcluj.lci.codegen.framework.dt.OrderedSet;
import ro.ubbcluj.lci.codegen.framework.ocl.BasicConstraintChecker;
import ro.ubbcluj.lci.codegen.framework.ocl.Ocl;

public class SaleAgent {

    
    public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public void setSales(OrderedSet sales) {
		this.sales = sales;
	}

	public SaleAgent(OrderedSet sales, int id, String name, SaleSystem job) {
		super();
		this.sales = sales;
		this.id = id;
		this.name = name;
		this.job = job;
	}

	public void makeSale(Sale sale) {
		sales.add(sale);
		job.handleNewSale(sale);
    }
    
    public final SaleSystem getJob() {

        return job;
    }
    
    public final void setJob(SaleSystem arg) {

        if (job != arg) {
            SaleSystem temp = job;
            job = null;//to avoid infinite recursions
            if (temp != null) {
                temp.removeSaleAgents(this);
            }
            if (arg != null) {
                job = arg;
                arg.addSaleAgents(this);
            }
        }

    }
    
    public final OrderedSet getSales() {

        if (sales == null) {
            return new OrderedSet();
        }
        return sales;
    }
    
    public final void addSales(Sale arg) {

        if (arg != null) {
            if (sales == null) {
                sales = new OrderedSet();
            }
            sales.add(arg);
        }

    }
    
    public final void removeSales(Sale arg) {

        if (sales != null && arg != null) {
            sales.remove(arg);
        }

    }
    
    public void validate () {
    	ConstraintChecker cc = new ConstraintChecker();
    	cc.checkConstraints();
    }
    
    public class ConstraintChecker extends BasicConstraintChecker {

        
        public void checkConstraints() {

            super.checkConstraints();
            check_SaleAgent_Id_invariant();
            check_SaleAgent_Name_invariant();
        }
        
        public void check_SaleAgent_Id_invariant() {

            int nId = SaleAgent.this.id;
            boolean bIsDefined = Ocl.isDefined(Integer.toInteger(nId));
            int nId0 = SaleAgent.this.id;
            boolean bGreater = nId0 > 0;
            boolean bAnd = bIsDefined && bGreater;
            if (!bAnd) {
                System.err.println("invariant 'id greater than zero' failed for object "+SaleAgent.this);
            }

        }
        
        public void check_SaleAgent_Name_invariant() {

            String strName = SaleAgent.this.name;
            boolean bNotEquals = !strName.equals("");
            if (!bNotEquals) {
                System.err.println("invariant 'name is not empty' failed for object "+SaleAgent.this);
            }

        }
        

    }
    
    public OrderedSet sales;
    
    private int id;
    
    private String name;
    
    private SaleSystem job;
	@Override
	public String toString() {
		return "SaleAgent [sales=" + sales + ", id=" + id + ", name=" + name
				+ ", job=" + job + "]";
	}
    
	 public Set<Sale> totalSales() {
	        Set<Sale> setAsSet = SaleAgent.this.getSales();
	        return setAsSet;

	    }
}
