

/*
 * @(#)SaleAgent.java
 *
 * Generated by <a href="http://lci.cs.ubbcluj.ro/ocle/>OCLE 2.0</a>
 * using <a href="http://jakarta.apache.org/velocity/">
 * Velocity Template Engine 1.3rc1</a>
 */
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import ro.ubbcluj.lci.codegen.framework.dt.Integer;
import ro.ubbcluj.lci.codegen.framework.dt.OrderedSet;
import ro.ubbcluj.lci.codegen.framework.ocl.BasicConstraintChecker;
import ro.ubbcluj.lci.codegen.framework.ocl.CollectionUtilities;
import ro.ubbcluj.lci.codegen.framework.ocl.Ocl;
import ro.ubbcluj.lci.codegen.framework.ocl.OclType;

public class SaleAgent {

    
    public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public void setSales(OrderedSet sales) {
		this.sales = sales;
	}

	public SaleAgent(OrderedSet sales, int id, String name, SaleSystem job) {
		super();
		this.sales = sales;
		this.id = id;
		this.name = name;
		this.job = job;
	}

	public void makeSale(Sale sale) {
		job.handleNewSale(sale);
    }
    
    public final SaleSystem getJob() {

        return job;
    }
    
    public final void setJob(SaleSystem arg) {

        if (job != arg) {
            SaleSystem temp = job;
            job = null;//to avoid infinite recursions
            if (temp != null) {
                temp.removeSaleAgents(this);
            }
            if (arg != null) {
                job = arg;
                arg.addSaleAgents(this);
            }
        }

    }
    
    public final OrderedSet getSales() {

        if (sales == null) {
            return new OrderedSet();
        }
        return sales;
    }
    
    public final void addSales(Sale arg) {

        if (arg != null) {
            if (sales == null) {
                sales = new OrderedSet();
            }
            sales.add(arg);
        }

    }
    
    public final void removeSales(Sale arg) {

        if (sales != null && arg != null) {
            sales.remove(arg);
        }

    }
    
    public void validate () {
    	ConstraintChecker cc = new ConstraintChecker();
    	cc.checkConstraints();
    }
    
    public class ConstraintChecker extends BasicConstraintChecker {

        
        public void checkConstraints() {

            super.checkConstraints();
            check_SaleAgent_invariant();
            check_SaleAgent_invariant0();
            check_SaleAgent_invariant1();

        }
        
        public void check_SaleAgent_invariant() {

            int nId = SaleAgent.this.id;
            boolean bIsDefined = Ocl.isDefined(Integer.toInteger(nId));
            int nId0 = SaleAgent.this.id;
            boolean bGreater = nId0 > 0;
            boolean bAnd = bIsDefined && bGreater;
            if (!bAnd) {
                System.err.println("invariant 'id' failed for object "+SaleAgent.this);
            }

        }
        
        public void check_SaleAgent_invariant0() {

            String strName = SaleAgent.this.name;
            boolean bNotEquals = !strName.equals("");
            if (!bNotEquals) {
                System.err.println("invariant 'empty name' failed for object "+SaleAgent.this);
            }

        }
        
        public void check_SaleAgent_invariant1() {

        Set<?> setAllInstances = Ocl.getType(new Class[]{SaleAgent.class}).allInstances();
            //evaluate 'collect(id)':
            List<Integer> bagCollect = CollectionUtilities.newBag();
            final Iterator<?> iter = setAllInstances.iterator();
            while (iter.hasNext()) {
                final SaleAgent decl = (SaleAgent)iter.next();
                int nId = decl.id;
                
                bagCollect.add(Integer.toInteger(nId));
            }
            bagCollect = CollectionUtilities.flatten(bagCollect);
            
            //evaluate 'isUnique(n|n)':
            Set<Integer> uniquenessValidator = CollectionUtilities.newSet();
            boolean bIsUnique = true;
            final Iterator<Integer> iter0 = bagCollect.iterator();
            while (bIsUnique && iter0.hasNext()) {
                final int n = iter0.next().asInteger();
                
                bIsUnique = uniquenessValidator.add(Integer.toInteger(n));
            }
            if (!bIsUnique) {
                System.err.println("invariant 'unique_id' failed for object "+SaleAgent.this);
            }

        }

    }
    
    public OrderedSet sales;
    
    private int id;
    
    private String name;
    
    private SaleSystem job;
    {

        OclType.registerInstance(this, SaleAgent.class);

    }
	@Override
	public String toString() {
		return "SaleAgent [sales=" + sales + ", id=" + id + ", name=" + name
				+ ", job=" + job + "]";
	}
    
	 public Set totalSale() {
	        Set setAsSet = SaleAgent.this.getSales();
	        return setAsSet;

	    }
	    
	    public List lastSale() {

	        OrderedSet seqSales = SaleAgent.this.getSales();
	    //evaluate 'collectNested(s|Sequence{s,s.saleDate,s.items})':
	        List seqCollectNested = CollectionUtilities.newBag();
	        final Iterator iter = seqSales.iterator();
	        while (iter.hasNext()) {
	            final Sale s = (Sale)iter.next();
	            List seq = CollectionUtilities.newSequence();
	            CollectionUtilities.add(seq, s);
	            String dateTimeSaleDate = s.getSaleDate();
	            CollectionUtilities.add(seq, dateTimeSaleDate);
	            OrderedSet seqItems = (OrderedSet) s.getItems();
	            CollectionUtilities.add(seq, seqItems);
	            
	            seqCollectNested.add(seq);
	        }
	        int nsize = sales.size();
	        List seqAt = (List)CollectionUtilities.at(seqCollectNested, nsize);
	        return seqAt;

	    }
    

}
