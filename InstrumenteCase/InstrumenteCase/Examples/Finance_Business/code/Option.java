
/*
 * @(#)Option.java
 *
 * Generated by <a href="http://lci.cs.ubbcluj.ro/ocle/>OCLE 2.0</a>
 * using <a href="http://jakarta.apache.org/velocity/">
 * Velocity Template Engine 1.3rc1</a>
 */
import ro.ubbcluj.lci.codegen.framework.ocl.BasicConstraintChecker;
import ro.ubbcluj.lci.codegen.framework.ocl.Ocl;
import ro.ubbcluj.lci.codegen.framework.ocl.OclType;

/**
 *
 * @author unascribed
 */
public class Option extends Security {

	
	public float marketValue() {

		return 0;

	}
	
	public float theorPrice() {

		return 0;

	}
	
	public final Security getRefer_to() {

		return refer_to;
	}
	
	public final void setRefer_to(Security arg) {

		if (refer_to != arg) {
			Security temp = refer_to;
			refer_to = null;//to avoid infinite recursions
			if (temp != null) {
				temp.removeOption(this);
			}
			if (arg != null) {
				refer_to = arg;
				arg.addOption(this);
			}
		}

	}
	
	public Option() {

	}
	
	public class ConstraintChecker extends BasicConstraintChecker {

		
		public void checkConstraints() {

			super.checkConstraints();
			check_Option_invariant();
			check_Option_invariant0();
			check_Option_another_invariant();

		}
		
		public void check_Option_invariant() {

			boolean bIf;
		boolean bOclIsKindOf = Ocl.isKindOf(Option.this, Ocl.getType(new Class[]{Security.class}));
			
			if (bOclIsKindOf) {
				Security securityOclAsType = Option.this;
				boolean bIsDefined = Ocl.isDefined(securityOclAsType);
				
				bIf = bIsDefined;
			}
			else {
				
				bIf = true;
			}
			if (!bIf) {
				System.err.println("invariant 'invariant' failed for object "+Option.this);
			}

		}
		
		public void check_Option_invariant0() {

			Security securityRefer_to = Option.this.getRefer_to();
			OclType typeOclType = Ocl.type(securityRefer_to);
		boolean bNotEquals = !typeOclType.equals(Ocl.getType(new Class[]{Option.class}));
			if (!bNotEquals) {
				System.err.println("invariant 'invariant0' failed for object "+Option.this);
			}

		}
		
		public void check_Option_another_invariant() {

			Security securityRefer_to = Option.this.getRefer_to();
			boolean bNotEquals = !Option.this.equals(securityRefer_to);
			if (!bNotEquals) {
				System.err.println("invariant 'another_invariant' failed for object "+Option.this);
			}

		}

	}
	
	public Security refer_to;
	
	private float strikePrice;
	
	private Date expirationDate;

}
